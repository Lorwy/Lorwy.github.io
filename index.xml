<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lorwy&#39;s blog</title>
    <link>http://lorwy.github.io/</link>
    <description>Recent content on Lorwy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>lorwy</copyright>
    <lastBuildDate>Mon, 22 Oct 2018 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://lorwy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://lorwy.github.io/about/</link>
      <pubDate>Mon, 22 Oct 2018 21:38:52 +0800</pubDate>
      
      <guid>http://lorwy.github.io/about/</guid>
      
        <description>&lt;p&gt;这是一个学习、分享的地方！&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS面试之道_架构篇_Note</title>
      <link>http://lorwy.github.io/post/note/ios%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93_%E6%9E%B6%E6%9E%84%E7%AF%87_note/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://lorwy.github.io/post/note/ios%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93_%E6%9E%B6%E6%9E%84%E7%AF%87_note/</guid>
      
        <description>

&lt;p&gt;每个类、结构体、方法、变量的存在都应该遵循单一职责原则。&lt;/p&gt;

&lt;h1 id=&#34;mvc架构的优缺点&#34;&gt;MVC架构的优缺点&lt;/h1&gt;

&lt;p&gt;优点有2：
- 代码总量少
- 简单易懂&lt;/p&gt;

&lt;p&gt;缺点：（造成的原因主要因为&lt;strong&gt;视图层和控制器层高度耦合&lt;/strong&gt;）
- 代码过于集中（ViewController功能太过沉重）
   - 交互
   - 视图更新
   - 布局
   - Model数据获取及修改
   - 导航路由
- 难以进行测试
- 难以扩展（*ViewController太过笨重*）
- Model层过于简单
- 网络层无从安放&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;: 过于笼统的代码分配，导致除了数据或者视图外的类、结构、方法等都将被放到ViewController中，造成ViewController过于臃肿，与view和无法解耦合&lt;/p&gt;

&lt;h1 id=&#34;mvcs&#34;&gt;MVCS&lt;/h1&gt;

&lt;p&gt;对MVC的一种优化，S即Store，就是数据处理的，可以是数据持久化相关的代码、数据筛选分类之类的等等，无处安放的网络请求代码也可以放到这里&lt;/p&gt;

&lt;h1 id=&#34;viper架构简介&#34;&gt;VIPER架构简介&lt;/h1&gt;

&lt;p&gt;VIPER架构由5部分组成：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;Interactor&lt;/li&gt;
&lt;li&gt;Presenter&lt;/li&gt;
&lt;li&gt;Entity&lt;/li&gt;
&lt;li&gt;Router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示意图：
&lt;img src=&#34;https://lorwy.github.io/image/VIPER.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;各模块说明&#34;&gt;各模块说明&lt;/h4&gt;

&lt;h5 id=&#34;视图层-view&#34;&gt;视图层（View）&lt;/h5&gt;

&lt;p&gt;与MVP、MVVM一样，它包含与UI相关的一切操作，接受用户交互信息但不处理，而是传递给展示层&lt;/p&gt;

&lt;h5 id=&#34;展示层-presenter&#34;&gt;展示层（Presenter）&lt;/h5&gt;

&lt;p&gt;与MVP的Presenter或者MVVM的ViewModel功能类似。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;响应view传来的交互操作请求&lt;/li&gt;
&lt;li&gt;不对数据源修改，有修改需求的话就向Interactor发送请求&lt;/li&gt;
&lt;li&gt;链接路由层&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;路由层-router&#34;&gt;路由层（Router）&lt;/h5&gt;

&lt;p&gt;负责界面跳转、组件切换&lt;/p&gt;

&lt;h5 id=&#34;数据管理层-interactor&#34;&gt;数据管理层（Interactor）&lt;/h5&gt;

&lt;p&gt;负责处理数据源信息
- 网络请求
- 数据传输
- 缓存、存储
- 生成实例等
- 一些从中间层和模型层的一些逻辑差不多被剥离至此&lt;/p&gt;

&lt;h5 id=&#34;模型层-entity&#34;&gt;模型层（Entity）&lt;/h5&gt;

&lt;p&gt;很简单，只有下面两个东西
- 初始化方法
- 属性相关的get/set方法&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>观 sunnyxx iOS 面试视频总结</title>
      <link>http://lorwy.github.io/post/note/sunnyxx_ios_note/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://lorwy.github.io/post/note/sunnyxx_ios_note/</guid>
      
        <description>

&lt;h1 id=&#34;review-简历&#34;&gt;Review 简历&lt;/h1&gt;

&lt;h4 id=&#34;关于项目总结&#34;&gt;关于项目总结&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;主要对这几块进行总结，要结合技术Tips总结出来&lt;/strong&gt;
- 项目描述
- 项目规模
- 其中职责
- 涉及的技术栈
- 遇到的挑战及如何解决的&lt;/p&gt;

&lt;h4 id=&#34;专业技能&#34;&gt;专业技能：&lt;/h4&gt;

&lt;p&gt;例举技术名词时写出用其做了什么，如：
熟练应用objc runtime技术，曾使用它做了ViewController进入和退出时的&lt;strong&gt;AOP埋点&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;更多信息来体现特别&#34;&gt;更多信息来体现特别&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Blog&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;技术探索&lt;/li&gt;
&lt;li&gt;对技术的个人理解&lt;/li&gt;
&lt;li&gt;做过的有意思的事儿（与技术相关的）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;理解基本的应用架构&#34;&gt;理解基本的应用架构&lt;/h4&gt;

&lt;p&gt;MVC和MVVM理解是否正确&lt;/p&gt;

&lt;h2 id=&#34;几个面试题举例&#34;&gt;几个面试题举例&lt;/h2&gt;

&lt;h3 id=&#34;sr-内容管理&#34;&gt;[SR]内容管理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stack 和 Heap 分别的使用，如何管理？&lt;/li&gt;
&lt;li&gt;ARC 是如何实现的？&lt;/li&gt;
&lt;li&gt;Autorelease 对象何时释放？&lt;/li&gt;
&lt;li&gt;AutoreleasePoll是如何实现的？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sr-理解-class-与对象模型&#34;&gt;[SR] 理解 Class 与对象模型&lt;/h3&gt;

&lt;h3 id=&#34;sr-理解-runloop&#34;&gt;[SR] 理解 Runloop&lt;/h3&gt;

&lt;h3 id=&#34;关于block的调用&#34;&gt;关于block的调用&lt;/h3&gt;

&lt;h3 id=&#34;sr-深入理解消息机制&#34;&gt;[SR] 深入理解消息机制&lt;/h3&gt;

&lt;p&gt;从写下[obj foo] 这行代码直到运行时 foo 被调用，中间都发生了什么？
&lt;strong&gt;掌握&lt;/strong&gt;：objc_msgSend 的关键调用，后续如何通过 selector 从 isa 找到 IMP，若运行时没找到 foo 会如何？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;精通&lt;/strong&gt;：编译器如何编译成 objc_msgSend、消息 cache 机制、消息转发机制、objc_msgSend 的各个版本、objc_msgSend的实现、跳板机制等&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>