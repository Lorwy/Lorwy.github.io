<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Lorwy&#39;s blog</title>
    <link>https://lorwy.github.io/tags/ios/</link>
    <description>Recent content in Ios on Lorwy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Tue, 23 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lorwy.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS面试之道_架构篇_Note</title>
      <link>https://lorwy.github.io/post/note/ios%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93_%E6%9E%B6%E6%9E%84%E7%AF%87_note/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://lorwy.github.io/post/note/ios%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93_%E6%9E%B6%E6%9E%84%E7%AF%87_note/</guid>
      <description> 每个类、结构体、方法、变量的存在都应该遵循单一职责原则。
MVC架构的优缺点 优点有2：
 代码总量少 简单易懂  缺点：（造成的原因主要因为视图层和控制器层高度耦合）
 代码过于集中（ViewController功能太过沉重）  交互 视图更新 布局 Model数据获取及修改 导航路由  难以进行测试 难以扩展（*ViewController太过笨重*） Model层过于简单 网络层无从安放  总结: 过于笼统的代码分配，导致除了数据或者视图外的类、结构、方法等都将被放到ViewController中，造成ViewController过于臃肿，与view和无法解耦合
MVCS 对MVC的一种优化，S即Store，就是数据处理的，可以是数据持久化相关的代码、数据筛选分类之类的等等，无处安放的网络请求代码也可以放到这里
VIPER架构简介 VIPER架构由5部分组成：
 View Interactor Presenter Entity Router  示意图：
各模块说明 视图层（View） 与MVP、MVVM一样，它包含与UI相关的一切操作，接受用户交互信息但不处理，而是传递给展示层
展示层（Presenter） 与MVP的Presenter或者MVVM的ViewModel功能类似。
 响应view传来的交互操作请求 不对数据源修改，有修改需求的话就向Interactor发送请求 链接路由层  路由层（Router） 负责界面跳转、组件切换
数据管理层（Interactor） 负责处理数据源信息
 网络请求 数据传输 缓存、存储 生成实例等 一些从中间层和模型层的一些逻辑差不多被剥离至此  模型层（Entity） 很简单，只有下面两个东西
 初始化方法 属性相关的get/set方法  </description>
    </item>
    
    <item>
      <title>观 sunnyxx iOS 面试视频总结</title>
      <link>https://lorwy.github.io/post/note/sunnyxx_ios_note/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://lorwy.github.io/post/note/sunnyxx_ios_note/</guid>
      <description>Review 简历 关于项目总结 主要对这几块进行总结，要结合技术Tips总结出来 - 项目描述 - 项目规模 - 其中职责 - 涉及的技术栈 - 遇到的挑战及如何解决的
专业技能： 例举技术名词时写出用其做了什么，如： 熟练应用objc runtime技术，曾使用它做了ViewController进入和退出时的AOP埋点
更多信息来体现特别  Blog GitHub 技术探索 对技术的个人理解 做过的有意思的事儿（与技术相关的）  理解基本的应用架构 MVC和MVVM理解是否正确
几个面试题举例 [SR]内容管理  Stack 和 Heap 分别的使用，如何管理？ ARC 是如何实现的？ Autorelease 对象何时释放？ AutoreleasePoll是如何实现的？  [SR] 理解 Class 与对象模型 [SR] 理解 Runloop 关于block的调用 [SR] 深入理解消息机制 从写下[obj foo] 这行代码直到运行时 foo 被调用，中间都发生了什么？ 掌握：objc_msgSend 的关键调用，后续如何通过 selector 从 isa 找到 IMP，若运行时没找到 foo 会如何？
精通：编译器如何编译成 objc_msgSend、消息 cache 机制、消息转发机制、objc_msgSend 的各个版本、objc_msgSend的实现、跳板机制等</description>
    </item>
    
  </channel>
</rss>